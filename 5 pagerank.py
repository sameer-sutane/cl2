# -*- coding: utf-8 -*-
"""A4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m9a5owc3arrLVlcmr6sTpTk87Y9wrsf0
"""

# Define the graph structure as an adjacency list
web_graph = {
    "PageA": ["PageB", "PageC"],
    "PageB": ["PageC"],
    "PageC": ["PageA"],
    "PageD": ["PageC"]
}

def page_rank(graph, num_iterations=100, damping_factor=0.85):
    # Initialize the PageRank values equally among all pages
    num_pages = len(graph)
    page_ranks = {page: 1 / num_pages for page in graph}

    # Iterate to update PageRank values
    for _ in range(num_iterations):
        new_page_ranks = {}
        for page in graph:
            # Calculate the PageRank for the current page
            rank_sum = 0
            for other_page in graph:
                if page in graph[other_page]:
                    rank_sum += page_ranks[other_page] / len(graph[other_page])

            # Apply the PageRank formula with the damping factor
            new_page_ranks[page] = (1 - damping_factor) / num_pages + damping_factor * rank_sum

        # Update PageRank values
        page_ranks = new_page_ranks

    return page_ranks

# Run the PageRank algorithm
page_ranks = page_rank(web_graph)
print("PageRank Values:")
for page, rank in page_ranks.items():
    print(f"{page}: {rank:.4f}")

from bs4 import BeautifulSoup
import requests

def get_links_from_page(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True)]
        return links
    except Exception as e:
        print(f"Error fetching {url}: {e}")
        return []

# Example usage
url = "https://example.com"
links = get_links_from_page(url)
print("Links found on the page:", links)